#include <windows.h>
#include <gdiplus.h>
#include <iostream>
#include <string>
#include <ctime>

#pragma comment(lib, "Gdiplus.lib")

using namespace Gdiplus;
using namespace std;

// --- Clases del sistema de gestión médica ---

class CasoMedico {
public:
    int id;
    string descripcion;
    int urgencia;
    time_t fecha;

    CasoMedico(int i, string d, int u) : id(i), descripcion(d), urgencia(u) {
        fecha = time(nullptr);
    }
};

class NodoAVL {
public:
    CasoMedico* caso;
    NodoAVL* izquierda;
    NodoAVL* derecha;
    int altura;

    NodoAVL(CasoMedico* c) : caso(c), izquierda(nullptr), derecha(nullptr), altura(1) {}
};

class TablaHash {
    static const int TAMANO = 1000;
    struct NodoLista {
        CasoMedico* caso;
        NodoLista* siguiente;
        NodoLista(CasoMedico* c) : caso(c), siguiente(nullptr) {}
    };
    NodoLista* tabla[TAMANO];

public:
    TablaHash() {
        for (int i = 0; i < TAMANO; i++) tabla[i] = nullptr;
    }

    int funcionHash(int id) {
        return id % TAMANO;
    }

    void insertar(CasoMedico* caso) {
        int indice = funcionHash(caso->id);
        NodoLista* nuevo = new NodoLista(caso);
        nuevo->siguiente = tabla[indice];
        tabla[indice] = nuevo;
    }

    CasoMedico* buscar(int id) {
        int indice = funcionHash(id);
        NodoLista* actual = tabla[indice];
        while (actual) {
            if (actual->caso->id == id) return actual->caso;
            actual = actual->siguiente;
        }
        return nullptr;
    }
};

class AVLManager {
    NodoAVL* raiz;

    int altura(NodoAVL* n) {
        return n ? n->altura : 0;
    }

    NodoAVL* rotarDerecha(NodoAVL* y) {
        NodoAVL* x = y->izquierda;
        NodoAVL* T2 = x->derecha;

        x->derecha = y;
        y->izquierda = T2;

        y->altura = max(altura(y->izquierda), altura(y->derecha)) + 1;
        x->altura = max(altura(x->izquierda), altura(x->derecha)) + 1;

        return x;
    }

    NodoAVL* rotarIzquierda(NodoAVL* x) {
        NodoAVL* y = x->derecha;
        NodoAVL* T2 = y->izquierda;

        y->izquierda = x;
        x->derecha = T2;

        x->altura = max(altura(x->izquierda), altura(x->derecha)) + 1;
        y->altura = max(altura(y->izquierda), altura(y->derecha)) + 1;

        return y;
    }

    int balanceFactor(NodoAVL* n) {
        return n ? altura(n->izquierda) - altura(n->derecha) : 0;
    }

    NodoAVL* insertar(NodoAVL* nodo, CasoMedico* caso) {
        if (!nodo) return new NodoAVL(caso);

        if (caso->fecha < nodo->caso->fecha)
            nodo->izquierda = insertar(nodo->izquierda, caso);
        else
            nodo->derecha = insertar(nodo->derecha, caso);

        nodo->altura = 1 + max(altura(nodo->izquierda), altura(nodo->derecha));

        int balance = balanceFactor(nodo);

        if (balance > 1 && caso->fecha < nodo->izquierda->caso->fecha)
            return rotarDerecha(nodo);

        if (balance < -1 && caso->fecha > nodo->derecha->caso->fecha)
            return rotarIzquierda(nodo);

        if (balance > 1 && caso->fecha > nodo->izquierda->caso->fecha) {
            nodo->izquierda = rotarIzquierda(nodo->izquierda);
            return rotarDerecha(nodo);
        }

        if (balance < -1 && caso->fecha < nodo->derecha->caso->fecha) {
            nodo->derecha = rotarDerecha(nodo->derecha);
            return rotarIzquierda(nodo);
        }

        return nodo;
    }

public:
    AVLManager() : raiz(nullptr) {}

    void insertarCaso(CasoMedico* caso) {
        raiz = insertar(raiz, caso);
    }
};

// --- Variables globales para la ventana ---

HWND hwndMain = nullptr;
ULONG_PTR gdiplusToken;
Bitmap* imagen = nullptr;

// --- Prototipos ---

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

// --- Funciones para inicializar y mostrar la ventana ---

bool InicializarGDIPlus() {
    GdiplusStartupInput gdiplusStartupInput;
    return GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) == Ok;
}

void FinalizarGDIPlus() {
    if (imagen) {
        delete imagen;
        imagen = nullptr;
    }
    GdiplusShutdown(gdiplusToken);
}

bool CargarImagen(const wchar_t* ruta) {
    imagen = Bitmap::FromFile(ruta);
    return imagen && imagen->GetLastStatus() == Ok;
}

int CrearVentana(HINSTANCE hInstance, int nCmdShow) {
    WNDCLASS wc = { 0 };
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = L"MiVentanaImagen";
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"No se pudo registrar la clase de ventana", L"Error", MB_ICONERROR);
        return 0;
    }

    hwndMain = CreateWindow(wc.lpszClassName, L"Sistema de Gestion Medica - Imagen",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 600, 400,
        NULL, NULL, hInstance, NULL);

    if (!hwndMain) {
        MessageBox(NULL, L"No se pudo crear la ventana", L"Error", MB_ICONERROR);
        return 0;
    }

    ShowWindow(hwndMain, nCmdShow);
    UpdateWindow(hwndMain);

    return 1;
}

// --- Procedimiento de ventana ---

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        if (imagen) {
            Graphics graphics(hdc);
            // Dibuja la imagen en la esquina superior izquierda
            graphics.DrawImage(imagen, 10, 10, imagen->GetWidth(), imagen->GetHeight());
        }
        EndPaint(hwnd, &ps);
    } break;

    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

// --- Sistema de gestión médica ---

class SistemaGestion {
    TablaHash tablaHash;
    AVLManager avlManager;
    int contadorID = 1;

public:
    void agregarCaso() {
        string desc;
        int urgencia;

        cout << "Descripcion: ";
        cin.ignore();
        getline(cin, desc);

        cout << "Nivel de urgencia (1-5): ";
        cin >> urgencia;

        CasoMedico* nuevo = new CasoMedico(contadorID++, desc, urgencia);
        tablaHash.insertar(nuevo);
        avlManager.insertarCaso(nuevo);
    }

    void buscarPorID() {
        int id;
        cout << "ID a buscar: ";
        cin >> id;

        CasoMedico* caso = tablaHash.buscar(id);
        if (caso) {
            cout << "Caso encontrado:" << endl;
            cout << "Fecha: " << ctime(&caso->fecha);
            cout << "Urgencia: " << caso->urgencia << endl;
            cout << "Descripcion: " << caso->descripcion << endl;
        }
        else {
            cout << "Caso no encontrado" << endl;
        }
    }

    void menu() {
        while (true) {
            cout << "\nSistema de Gestion Medica\n";
            cout << "1. Agregar caso\n";
            cout << "2. Buscar por ID\n";
            cout << "3. Salir\n";
            cout << "Opcion: ";

            int opcion;
            cin >> opcion;

            switch (opcion) {
            case 1: agregarCaso(); break;
            case 2: buscarPorID(); break;
            case 3: return;
            default: cout << "Opcion invalida\n"; break;
            }
        }
    }
};

// --- Función principal ---

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    // Inicializar GDI+
    if (!InicializarGDIPlus()) {
        MessageBox(NULL, L"No se pudo inicializar GDI+", L"Error", MB_ICONERROR);
        return 1;
    }

    // Cargar imagen (coloca la ruta correcta de una imagen PNG/JPG en tu PC)
    if (!CargarImagen(L"imagen.png")) {
        MessageBox(NULL, L"No se pudo cargar la imagen. Asegurate que 'imagen.png' exista en la carpeta del ejecutable.", L"Error", MB_ICONERROR);
        FinalizarGDIPlus();
        return 1;
    }

    // Crear ventana para mostrar la imagen
    if (!CrearVentana(hInstance, nCmdShow)) {
        FinalizarGDIPlus();
        return 1;
    }

    // Ejecutar menú en consola en un hilo separado o antes/después de la ventana
    // Para simplificar, mostramos el menú en consola antes de entrar al loop de ventana

    SistemaGestion sistema;
    sistema.menu();

    // Loop de mensajes WinAPI
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    FinalizarGDIPlus();
    return (int)msg.wParam;
}
